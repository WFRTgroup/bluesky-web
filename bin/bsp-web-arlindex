#! /usr/bin/env python

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2015, AirFire, PNW, USFS"

import json
import sys
import traceback

import tornado.ioloop
import tornado.log

import afscripting as scripting

try:
    from blueskyweb.app import configure_logging
    from blueskyweb.lib import met
except:
    import os
    root_dir = os.path.abspath(os.path.join(sys.path[0], '../'))
    sys.path.insert(0, root_dir)
    from blueskyweb.app import configure_logging
    from blueskyweb.lib import met


ACTIONS = [
    'list-obsolete',
    'prune',
    'clear-all'
]

REQUIRED_ARGS = [
    {
        'short': '-a',
        'long': '--action',
        'help': ', '.join(ACTIONS)
    }
]

OPTIONAL_ARGS = [
    {
        'short': '-m',
        'long': '--mongodb-url',
        'help': 'url to connect to mongodb for arl indexes and bsp job queues',
        'default': 'mongodb://blueskyweb:blueskywebmongopassword@localhost:27018/blueskyweb'
    }
]

# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """
Examples

   $ {script_name} --log-level=INFO -a list-obsolete
   $ {script_name} -a prune -m mongodb://mongo/blueskyweb

Example curl Requests

    $ curl "http://localhost:8887/blueskyweb/api/ping/"
 """.format(script_name=sys.argv[0])

def parse_args():
    parser = scripting.args.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = scripting.args.RawTextHelpFormatter
    scripting.args.add_arguments(parser, OPTIONAL_ARGS)
    scripting.args.add_arguments(parser, REQUIRED_ARGS, required=True)
    # Use afscripting to add logging options to the parser object,
    # but we'll configure logging oureselves in app.main
    scripting.args.add_logging_options(parser)
    args = parser.parse_args()
    # args.log_message_format = (args.log_message_format
    #     or "%(asctime)s %(levelname)s %(filename)s#%(funcName)s: %(message)s")
    configure_logging(**args.__dict__)
    return args

async def list_obsolete(db):
    tornado.log.gen_log.info('listing obsolete')
    obsolete = await db.list_obsolete_archives()
    sys.stdout.write(json.dumps(obsolete, indent=2))

async def prune():
    tornado.log.gen_log.info('pruning')

async def clear():
    tornado.log.gen_log.info('clearing')

async def main():
    args = parse_args()

    try:
        if args.action not in ACTIONS:
            tornado.log.gen_log.error('Invalid action: %s', args.action)
            sys.exit(1)
        else:
            tornado.log.gen_log.info('action: %s', args.action)
            db = met.MetArchiveDB(args.mongodb_url)
            await globals()[args.action.replace('-','_')](db)

    except Exception as e:
        tornado.log.gen_log.debug(traceback.format_exc())
        tornado.log.gen_log.error(e)
        sys.exit(1)

if __name__ == "__main__":
    tornado.ioloop.IOLoop.instance().run_sync(main)
