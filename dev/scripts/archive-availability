#! /usr/bin/env python

__author__ = "Joel Dubowy"
__copyright__ = "Copyright 2017, AirFire, PNW, USFS"

import datetime
import json
import os
import sys

import tornado

import afscripting as scripting

sys.path.insert(0, os.path.abspath(os.path.join(sys.path[0], '../../')))
import blueskyconfig
from blueskyweb.lib import met
from blueskyweb.app import configure_logging


# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """
Examples

   $ {script_name}
   $ {script_name} -i national_12-km
   $ {script_name} -a check -i national_12-km --log-level=DEBUG

 """.format(script_name=sys.argv[0])

REQUIRED_ARGS = []

OPTIONAL_ARGS = [
    {
        'short': '-a',
        'long': '--action',
        'help': "To 'get' or 'check' availbility (default 'get')",
        'default': 'get'
    },
    {
        'short': '-i',
        'long': '--archive-id',
        'help': 'Archive identifier'
    },
    {
        'long': '--mongodb-url',
        'help': 'url to connect to mongodb for arl indexes and bsp job queues',
        'default': "mongodb://blueskyweb:blueskywebmongopassword@localhost:27018/blueskyweb"
    },
    {
        'long': '--target-date',
        'help': 'Used when checking availability',
        'action': scripting.args.ParseDatetimeAction,
        'default': datetime.date.today()
    },
    {
        'long': '--date-range',
        'help': 'Used when checking availability',
        'type': int,
        'default': 1
    }
]

def validate_action(args):
    if args.action not in ('get', 'check'):
        sys.stdout.write("*** Invalid action: {}\n".format(args.action))
        sys.exit(1)


def parse_args():
    parser = scripting.args.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = scripting.args.RawTextHelpFormatter
    scripting.args.add_arguments(parser, OPTIONAL_ARGS)
    scripting.args.add_arguments(parser, REQUIRED_ARGS, required=True)
    # Use afscripting to add logging options to the parser object,
    # but we'll configure logging oureselves
    scripting.args.add_logging_options(parser)
    args = parser.parse_args()
    args.log_message_format = (args.log_message_format
        or "%(asctime)s %(levelname)s %(filename)s#%(funcName)s: %(message)s")
    configure_logging(**args.__dict__)
    validate_action(args)
    return args

async def main():
    args = parse_args()
    db = met.MetArchiveDB(args.mongodb_url)

    try:
        if args.action == 'get':
            data = await db.get_availability(archive_id=args.archive_id)
        else:
            data = await db.check_availability(args.archive_id, args.target_date,
                args.date_range)

    except met.InvalidArchiveError:
        sys.stdout.write("*** Invalid archive: {}\n".format(args.archive_id))
        sys.exit(1)

    except met.ArchiveNotDefinedError:
        sys.stdout.write("*** Specify an archive\n")
        sys.exit(1)

    sys.stdout.write(json.dumps(data, sort_keys=True, indent=2))

if __name__ == "__main__":
    tornado.ioloop.IOLoop.instance().run_sync(main)
